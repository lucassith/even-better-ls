#!/usr/bin/env python
# -*- coding: utf-8 -*-

# View this file with a 4-space-to-tab ratio.
def get_colors():

  FORMAT_COLORS = {
    LEFT:    "",         # Sequence to print *before* outputting a file name.
    RIGHT:   "",         # Sequence to print *after* outputting a file name.
    END:     "\x1b[0m",  # Sequence to print *after* the command executes.
    RESET:   "\x1b[0m"   # Sequence to print *after* the command executes. (functionally identical)
  }

  # The color_char(fg, bg, char, other) function takes arguments and formats them into a valid
  # LS_COLORS format specifier. FG denotes foreground (it is required). BG denotes background;
  # in order to disable the background set it to -1. The char argument is the character code for
  # the character that must be printed before the filename in ls. The "other" argument denotes
  # any escape codes to print after the main fg/bg sequence (e.g. bold, italic formatters).
  # ^^cc is an alias for color_char.
  SPECIAL = {
    NORMAL:                 "",                                            #    Should be left blank. Used as a fallback for everything else.
    FILE:                   cc(0xF016,   [-1,   -1]),                      #   Normal file, or one that does not have a color associated with it.
    DIRECTORY:              cc(0xF115,   [79,   -1]),                      #   A folder.
    LINK:                   cc(0xF838,   [117,  -1], [-1,   -1, "4"]),     #   Any kind of link.
    ORPHAN:                 cc(0xF839,   [235, 210], [235, 210, "4"]),     #   An "orphaned" inode. Should be set to an error condition.
    MISSING:                cc(0xF059,   [235, 203]),                      #   A "missing" inode. Should be set to an error condition.
    PIPE:                   cc(0xFCE3,   [218,  -1]),                      # ﳣ  A named pipe.
    SOCKET:                 cc(0xFCE5,   [218, 235]),                      # ﳥ  A special bi-directional pipe.
    BLOCKDEV:               cc(0xF069,   [251, 237]),                      #   A block device (e.g. /dev/sda).
    CHARDEV:                cc(0xF069,   [255, 237]),                      #   A character device (e.g. /dev/random).
    DOOR:                   cc(0xFD1A,   [235,  79]),                      # ﴚ  Client-server communication door.
    EXEC:                   cc(0xF427,   [214,  -1]),                      #   An executable file.
    SETUID:                 cc(0xF016,   [117,  -1]),                      #   Set UID upon execution.
    SETGID:                 cc(0xF016,   [153,  -1]),                      #   Set GID upon execution.
    STICKY:                 cc(0xF07C,   [79,   -1]),                      #   Sticky bit set.
    OTHERWRITE:             cc(0xF115,   [218,  -1]),                      #   Writable by others than the owner + root.
    STOTHERWRITE:           cc(0xF07C,   [218,  -1]),                      #   Sticky, but writable by others than the owner + root.
    CAPABILITIES:           cc(0xF077,   [203,  -1], [214,  -1]),          #   File with capabilites.
    MULTIHARDLINK:          cc(0xF016,   [120,  -1], [-1,   -1]),          #   Has multiple hard links.
  }

  EXTENSION_LIST = {
    # Archives
    ".7z":                  cc(0xF1C6,   [222, -1]),                       # 
    ".ace":                 cc(0xF1C6,   [222, -1]),                       # 
    ".arj":                 cc(0xF1C6,   [222, -1]),                       # 
    ".bz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".bz2":                 cc(0xF1C6,   [222, -1]),                       # 
    ".cpio":                cc(0xF1C6,   [222, -1]),                       # 
    ".dz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".gz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".lrz":                 cc(0xF1C6,   [222, -1]),                       # 
    ".lz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".lzma":                cc(0xF1C6,   [222, -1]),                       # 
    ".lzo":                 cc(0xF1C6,   [222, -1]),                       # 
    ".nc":                  cc(0xF1C6,   [222, -1]),                       # 
    ".rar":                 cc(0xF1C6,   [222, -1]),                       # 
    ".rz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".s7z":                 cc(0xF1C6,   [222, -1]),                       # 
    ".sz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".tar":                 cc(0xF1C6,   [222, -1]),                       # 
    ".taz":                 cc(0xF1C6,   [222, -1]),                       # 
    ".tbz":                 cc(0xF1C6,   [222, -1]),                       # 
    ".tbz2":                cc(0xF1C6,   [222, -1]),                       # 
    ".tgz":                 cc(0xF1C6,   [222, -1]),                       # 
    ".tlz":                 cc(0xF1C6,   [222, -1]),                       # 
    ".txz":                 cc(0xF1C6,   [222, -1]),                       # 
    ".tz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".xz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".Z":                   cc(0xF1C6,   [222, -1]),                       # 
    ".z":                   cc(0xF1C6,   [222, -1]),                       # 
    ".zip":                 cc(0xF1C6,   [222, -1]),                       # 
    ".zipx":                cc(0xF1C6,   [222, -1]),                       # 
    ".zoo":                 cc(0xF1C6,   [222, -1]),                       # 
    ".zpaq":                cc(0xF1C6,   [222, -1]),                       # 
    ".zz":                  cc(0xF1C6,   [222, -1]),                       # 
    ".cbr":                 cc(0xF1C5,   [222, -1]),                       # 
    ".cbz":                 cc(0xF1C5,   [222, -1]),                       # 

    # Archives (part files)
    ".r00":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r01":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r02":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r03":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r04":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r05":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r06":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r07":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r08":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r09":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r10":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r11":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r12":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r13":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r14":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r15":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r16":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r17":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r18":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r19":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r20":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r21":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r22":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r25":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r26":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r27":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r28":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r29":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r30":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r31":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r32":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r33":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r34":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r35":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r36":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r37":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r38":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r39":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r40":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r41":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r42":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r43":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r44":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r45":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r46":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r47":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r48":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r49":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r50":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r51":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r52":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r53":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r54":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r55":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r56":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r57":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r58":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r59":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r60":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r61":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r62":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r63":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r64":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r65":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r66":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r67":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r68":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r69":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r69":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r70":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r71":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r72":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r73":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r74":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r75":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r76":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r77":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r78":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r79":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r80":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r81":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r82":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r83":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r84":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r85":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r86":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r87":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r88":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r89":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r90":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r91":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r92":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r93":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r94":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r95":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r96":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r97":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r98":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r99":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r100":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r101":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r102":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r103":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r104":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r105":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r106":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r107":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r108":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r109":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r110":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r111":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r112":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r113":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r114":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r115":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".r116":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx00":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx01":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx02":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx03":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx04":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx05":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx06":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx07":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx08":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx09":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx10":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx11":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx12":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx13":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx14":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx15":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx16":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx17":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx18":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx19":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx20":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx21":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx22":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx25":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx26":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx27":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx28":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx29":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx30":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx31":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx32":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx33":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx34":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx35":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx36":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx37":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx38":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx39":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx40":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx41":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx42":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx43":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx44":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx45":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx46":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx47":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx48":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx49":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx50":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx51":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx52":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx53":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx54":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx55":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx56":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx57":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx58":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx59":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx60":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx61":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx62":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx63":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx64":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx65":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx66":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx67":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx68":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx69":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx69":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx70":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx71":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx72":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx73":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx74":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx75":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx76":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx77":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx78":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx79":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx80":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx81":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx82":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx83":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx84":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx85":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx86":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx87":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx88":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx89":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx90":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx91":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx92":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx93":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx94":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx95":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx96":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx97":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx98":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx99":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx100":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx101":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx102":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx103":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx104":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx105":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx106":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx107":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx108":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx109":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx110":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx111":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx112":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx113":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx114":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx115":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".zx116":               cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z00":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z01":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z02":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z03":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z04":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z05":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z06":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z07":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z08":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z09":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z10":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z11":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z12":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z13":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z14":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z15":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z16":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z17":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z18":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z19":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z20":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z21":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z22":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z25":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z26":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z27":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z28":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z29":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z30":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z31":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z32":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z33":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z34":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z35":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z36":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z37":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z38":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z39":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z40":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z41":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z42":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z43":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z44":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z45":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z46":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z47":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z48":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z49":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z50":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z51":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z52":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z53":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z54":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z55":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z56":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z57":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z58":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z59":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z60":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z61":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z62":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z63":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z64":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z65":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z66":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z67":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z68":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z69":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z69":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z70":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z71":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z72":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z73":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z74":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z75":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z76":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z77":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z78":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z79":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z80":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z81":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z82":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z83":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z84":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z85":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z86":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z87":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z88":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z89":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z90":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z91":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z92":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z93":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z94":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z95":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z96":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z97":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z98":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z99":                 cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z100":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z101":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z102":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z103":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z104":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z105":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z106":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z107":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z108":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z109":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z110":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z111":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z112":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z113":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z114":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z115":                cc(0xE601,   [222, -1], [102, -1]),            # 
    ".z116":                cc(0xE601,   [222, -1], [102, -1]),            # 

    # Packages
    ".apk":                 cc(0xF531,   [149, -1], [215, -1]),            #   Android
    ".bsp":                 cc(0xF487,   [215, -1]),                       # 
    ".cab":                 cc(0xF487,   [215, -1]),                       # 
    ".deb":                 cc(0xF487,   [215, -1]),                       # 
    ".gem":                 cc(0xE739,   [203, -1], [215, -1]),            #   Ruby
    ".jad":                 cc(0xE256,   [68,  -1], [215, -1]),            #  Java
    ".jar":                 cc(0xE256,   [68,  -1], [215, -1]),            #  Java
    ".war":                 cc(0xE256,   [68,  -1], [215, -1]),            #  Java
    ".msi":                 cc(0xF487,   [215, -1]),                       #   Win
    ".pak":                 cc(0xF487,   [215, -1]),                       # 
    ".pk3":                 cc(0xF487,   [215, -1]),                       # 
    ".pkg":                 cc(0xF487,   [215, -1]),                       #   OSX
    ".rpm":                 cc(0xF487,   [215, -1]),                       # 
    ".vdf":                 cc(0xF487,   [215, -1]),                       # 
    ".vpk":                 cc(0xF487,   [215, -1]),                       # 
    ".xpi":                 cc(0xF269,   [208, -1], [215, -1]),            #   Mozilla (Firefox, Thunderbird, etc)
    ".xul":                 cc(0xF269,   [208, -1], [215, -1]),            #   Firefox

    # Image files
    ".bin":                 cc(0xF0A0,   [216, -1]),                       # 
    ".img":                 cc(0xF0A0,   [216, -1]),                       # 
    ".iso":                 cc(0xF0A0,   [216, -1]),                       # 
    ".toast":               cc(0xF0A0,   [216, -1]),                       # 
    ".vcd":                 cc(0xF0A0,   [216, -1]),                       # 
    ".dmg":                 cc(0xF0A0,   [216, -1]),                       #   OSX
    ".nrg":                 cc(0xF0A0,   [216, -1]),                       # 
    ".qcow":                cc(0xF0A0,   [216, -1]),                       # 
    ".qcow2":               cc(0xF0A0,   [216, -1]),                       # 
    ".sparseimage":         cc(0xF0A0,   [216, -1]),                       #   OSX
    ".vmdk":                cc(0xF0A0,   [216, -1]),                       #   VMware

    # Images (bitmap)
    ".bmp":                 cc(0xF1C5,   [157, -1]),                       # 
    ".dicom":               cc(0xF1C5,   [157, -1]),                       # 
    ".cdr":                 cc(0xF1C5,   [157, -1]),                       # 
    ".CR2":                 cc(0xF1C5,   [157, -1]),                       # 
    ".drw":                 cc(0xF1C5,   [157, -1]),                       # 
    ".dvi":                 cc(0xF1C5,   [157, -1]),                       # 
    ".flif":                cc(0xF1C5,   [157, -1]),                       # 
    ".gif":                 cc(0xF1C5,   [157, -1]),                       # 
    ".ico":                 cc(0xF1C5,   [157, -1]),                       # 
    ".jpeg":                cc(0xF1C5,   [157, -1]),                       # 
    ".JPG":                 cc(0xF1C5,   [157, -1]),                       # 
    ".jpg":                 cc(0xF1C5,   [157, -1]),                       # 
    ".mng":                 cc(0xF1C5,   [157, -1]),                       # 
    ".nth":                 cc(0xF1C5,   [157, -1]),                       # 
    ".pbm":                 cc(0xF1C5,   [157, -1]),                       # 
    ".pcx":                 cc(0xF1C5,   [157, -1]),                       # 
    ".pgm":                 cc(0xF1C5,   [157, -1]),                       # 
    ".png":                 cc(0xF1C5,   [157, -1]),                       # 
    ".ppm":                 cc(0xF1C5,   [157, -1]),                       # 
    ".pxm":                 cc(0xF1C5,   [157, -1]),                       # 
    ".raw":                 cc(0xF1C5,   [157, -1]),                       # 
    ".tga":                 cc(0xF1C5,   [157, -1]),                       # 
    ".tif":                 cc(0xF1C5,   [157, -1]),                       # 
    ".tiff":                cc(0xF1C5,   [157, -1]),                       # 
    ".webp":                cc(0xF1C5,   [157, -1]),                       # 
    ".xbm":                 cc(0xF1C5,   [157, -1]),                       # 
    ".xcf":                 cc(0xF1C5,   [157, -1]),                       # 
    ".xpm":                 cc(0xF1C5,   [157, -1]),                       # 
    ".xwd":                 cc(0xF1C5,   [157, -1]),                       # 
    ".yuv":                 cc(0xF1C5,   [157, -1]),                       # 

    # Images (vector)
    ".cgm":                 cc(0xF500,   [157, -1]),                       # 
    ".drw":                 cc(0xF500,   [157, -1]),                       # 
    ".emf":                 cc(0xF500,   [157, -1]),                       # 
    ".eps":                 cc(0xF500,   [157, -1]),                       # 
    ".epsf":                cc(0xF500,   [157, -1]),                       # 
    ".ps":                  cc(0xF500,   [157, -1]),                       #   PostScript File
    ".svg":                 cc(0xF500,   [157, -1]),                       # 
    ".svgz":                cc(0xF500,   [157, -1]),                       # 

    # Audio
    ".3ga":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".aac":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".aif":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".au":                  cc(0xF001,   [219, -1]),                       # ﱘ  Audacity
    ".axa":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".dts":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".fcm":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".m4a":                 cc(0xF001,   [219, -1]),                       # ﱘ  Apple
    ".mid":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".midi":                cc(0xF001,   [219, -1]),                       # ﱘ
    ".mka":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".mp3":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".mp4a":                cc(0xF001,   [219, -1]),                       # ﱘ
    ".mpa":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".mpc":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".oga":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".ogg":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".opus":                cc(0xF001,   [219, -1]),                       # ﱘ  VoIP/Streaming
    ".ra":                  cc(0xF001,   [219, -1]),                       # ﱘ  RealPlayer
    ".s3m":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".sample":              cc(0xF001,   [219, -1]),                       # ﱘ
    ".spx":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".wma":                 cc(0xF001,   [219, -1]),                       # ﱘ

    # Audio (lossless)
    ".alac":                cc(0xF001,   [219, -1]),                       # ﱘ
    ".ape":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".aiff":                cc(0xF001,   [219, -1]),                       # ﱘ
    ".cda":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".flac":                cc(0xF001,   [219, -1]),                       # ﱘ
    ".pcm":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".wav":                 cc(0xF001,   [219, -1]),                       # ﱘ
    ".wv":                  cc(0xF001,   [219, -1]),                       # ﱘ
    ".wvc":                 cc(0xF001,   [219, -1]),                       # ﱘ

    # Audio (playlists)
    ".m3u":                 cc(0xF0CB,   [219, -1]),                       #   Playlist
    ".m3u8":                cc(0xF0CB,   [219, -1]),                       #   Playlist
    ".xspf":                cc(0xF0CB,   [219, -1]),                       #   Playlist

    # Video
    ".3g2":                 cc(0xF880,   [159, -1]),                       # 
    ".3gp":                 cc(0xF880,   [159, -1]),                       # 
    ".anx":                 cc(0xF880,   [159, -1]),                       #   Obsolete
    ".asf":                 cc(0xF880,   [159, -1]),                       # 
    ".avi":                 cc(0xF880,   [159, -1]),                       # 
    ".axv":                 cc(0xF880,   [159, -1]),                       #   Obsolete
    ".divx":                cc(0xF880,   [159, -1]),                       # 
    ".f4v":                 cc(0xF880,   [159, -1]),                       # 
    ".flc":                 cc(0xF880,   [159, -1]),                       #   Autodesk
    ".fli":                 cc(0xF880,   [159, -1]),                       #   Autodesk
    ".flv":                 cc(0xF880,   [159, -1]),                       #   Flash
    ".gl":                  cc(0xF880,   [159, -1]),                       #   Obsolete
    ".h264":                cc(0xF880,   [159, -1]),                       # 
    ".m2ts":                cc(0xF880,   [159, -1]),                       #   BluRay
    ".m2v":                 cc(0xF880,   [159, -1]),                       # 
    ".m4v":                 cc(0xF880,   [159, -1]),                       #   Apple
    ".mkv":                 cc(0xF880,   [159, -1]),                       # 
    ".mov":                 cc(0xF880,   [159, -1]),                       # 
    ".mp4":                 cc(0xF880,   [159, -1]),                       # 
    ".mp4v":                cc(0xF880,   [159, -1]),                       # 
    ".mpeg":                cc(0xF880,   [159, -1]),                       # 
    ".mpg":                 cc(0xF880,   [159, -1]),                       # 
    ".nuv":                 cc(0xF880,   [159, -1]),                       #   MythTV
    ".ogm":                 cc(0xF880,   [159, -1]),                       # 
    ".ogv":                 cc(0xF880,   [159, -1]),                       # 
    ".ogx":                 cc(0xF880,   [159, -1]),                       # 
    ".qt":                  cc(0xF880,   [159, -1]),                       #   Apple
    ".rm":                  cc(0xF880,   [159, -1]),                       #   RealPlayer
    ".rmvb":                cc(0xF880,   [159, -1]),                       #   RealPlayer
    ".swf":                 cc(0xF880,   [159, -1]),                       #   Flash
    ".vob":                 cc(0xF880,   [159, -1]),                       # 
    ".webm":                cc(0xF880,   [159, -1]),                       # 
    ".wmv":                 cc(0xF880,   [159, -1]),                       # 

    # Text files
    ".txt":                 cc(0xF0F6,   [255, -1]),                       # 

    # Special text files
    "*AUTHORS":             cc(0xF0C0,   [255, -1]),                       # 
    "*CHANGES":             cc(0xF0F6,   [255, -1]),                       # 
    "*CONTRIBUTORS":        cc(0xF0C0,   [255, -1]),                       # 
    "*COPYING":             cc(0xF0C5,   [255, -1]),                       # 
    "*COPYRIGHT":           cc(0xF1F9,   [255, -1]),                       # 
    "*HISTORY":             cc(0xF7D9,   [255, -1]),                       # 
    "*INSTALL":             cc(0xF0F6,   [255, -1]),                       # 
    "*LICENSE-APACHE":      cc(0xE60A,   [255, -1]),                       # 
    "*LICENSE-MIT":         cc(0xE78B,   [255, -1]),                       # 
    "*LICENSE":             cc(0xE60A,   [255, -1]),                       # 
    "*NOTICE":              cc(0xF0F6,   [255, -1]),                       # 
    "*PATENTS":             cc(0xF25D,   [255, -1]),                       # 
    "*README":              cc(0xF0F6,   [255, -1]),                       # 
    "*TODO":                cc(0xF046,   [255, -1]),                       # 
    "*VERSION":             cc(0xF454,   [255, -1]),                       # 

    # Markup (web and templates)
    ".eml":                 cc(0xF121,   [223, -1]),                       #   Email message
    ".haml":                cc(0xF121,   [223, -1]),                       #   HTML abstraction markup language
    ".htm":                 cc(0xF13B,   [223, -1]),                       #   Hypertext Markup Language
    ".html":                cc(0xF13B,   [223, -1]),                       #   Hypertext Markup Language
    ".jhtm":                cc(0xE256,   [68,  -1], [223, -1]),            #  Java HTML
    ".mht":                 cc(0xF121,   [223, -1]),                       #   Web page archive
    ".mustache":            cc(0xE228,   [244, -1], [223, -1]),            #   {{ mustache }} template
    ".pug":                 cc(0xF121,   [223, -1]),                       #   Pug template
    ".shtml":               cc(0xF121,   [223, -1]),                       #   Server Side Include HTML
    ".twig":                cc(0xE61C,   [149, -1], [223, -1]),            #   Twig
    ".xhtml":               cc(0xF121,   [223, -1]),                       #   Extensible HTML

    # Markup (other)
    ".etx":                 cc(0xF0F6,   [255, -1]),                       #   Setext
    ".ltx":                 cc(0xF0F6,   [255, -1]),                       #   LaText
    ".tex":                 cc(0xF0F6,   [255, -1]),                       #   LaText
    ".markdown":            cc(0xF48A,   [255, -1]),                       #   Markdown
    ".md":                  cc(0xF48A,   [255, -1]),                       #   Markdown
    ".mdown":               cc(0xF48A,   [255, -1]),                       #   Markdown
    ".mkd":                 cc(0xF48A,   [255, -1]),                       #   Markdown
    ".nfo":                 cc(0xF0F6,   [255, -1]),                       #   NFO
    ".org":                 cc(0xF0F6,   [255, -1]),                       #   Org-mode
    ".pod":                 cc(0xE769,   [122, -1], [255, -1]),            #   Perl documentation
    ".rdoc":                cc(0xE739,   [203, -1], [255, -1]),            #   Ruby
    ".rss":                 cc(0xF09E,   [208, -1]),                       #   RSS - Rich Site Summary
    ".rst":                 cc(0xF0F6,   [255, -1]),                       #   reStructuredText
    ".texi":                cc(0xF0F6,   [255, -1]),                       #   Texinfo
    ".info":                cc(0xF0F6,   [255, -1]),                       #   Texinfo
    ".textile":             cc(0xF0F6,   [255, -1]),                       #   Textile

    # Executables (Windows)
    ".bat":                 cc(0xE70F,   [214, -1]),                       # 
    ".com":                 cc(0xE70F,   [214, -1]),                       # 
    ".exe":                 cc(0xE70F,   [214, -1]),                       # 
    ".cmd":                 cc(0xE70F,   [214, -1]),                       # 
    ".reg":                 cc(0xE70F,   [214, -1]),                       # 

    # Executables (OSX)
    ".app":                 cc(0xF179,   [214, -1]),                       # 

    # Executables (Linux)
    ".ko":                  cc(0xF489,   [214, -1]),                       # 

    # Executables (Library)
    ".a":                   cc(0xF830,   [214, -1]),                       # 
    ".so":                  cc(0xF830,   [214, -1]),                       # 
    ".dll":                 cc(0xF830,   [214, -1]),                       # 

    # Fonts
    ".eot":                 cc(0xF031,   [147, -1]),                       # 
    ".fon":                 cc(0xF031,   [147, -1]),                       # 
    ".fnt":                 cc(0xF031,   [147, -1]),                       # 
    ".otf":                 cc(0xF031,   [147, -1]),                       # 
    ".ttf":                 cc(0xF031,   [147, -1]),                       # 
    ".woff":                cc(0xF031,   [147, -1]),                       # 
    ".woff2":               cc(0xF031,   [147, -1]),                       # 
    ".afm":                 cc(0xF031,   [147, -1]),                       # 
    ".pfb":                 cc(0xF031,   [147, -1]),                       # 
    ".pfm":                 cc(0xF031,   [147, -1]),                       # 
    ".pfa":                 cc(0xF031,   [147, -1]),                       # 

    # Word processing
    ".doc":                 cc(0xF1C2,   [33,  -1]),                       #   Word
    ".docx":                cc(0xF1C2,   [33,  -1]),                       #   Word
    ".docm":                cc(0xF1C2,   [33,  -1]),                       #   Word, macros
    ".dot":                 cc(0xF1C2,   [33,  -1]),                       #   Word, template
    ".dotx":                cc(0xF1C2,   [33,  -1]),                       #   Word, template
    ".gdoc":                cc(0xF1A0,   [33,  -1]),                       #   Google Docs
    ".gdocx":               cc(0xF1A0,   [33,  -1]),                       #   Google Docs
    ".odt":                 cc(0xF0F6,   [33,  -1]),                       #   OpenOffice/LibreOffice
    ".ott":                 cc(0xF0F6,   [33,  -1]),                       #   OpenOffice/LibreOffice, template
    ".rtf":                 cc(0xF0F6,   [33,  -1]),                       #   Rich Text Format
    ".sxw":                 cc(0xF0F6,   [33,  -1]),                       #   StarOffice/OpenOffice

    # Spreadsheets
    ".csv":                 cc(0xF0F6,   [76,  -1]),                       #   Comma-separated values
    ".xls":                 cc(0xF1C3,   [76,  -1]),                       #   Excel
    ".xlsx":                cc(0xF1C3,   [76,  -1]),                       #   Excel
    ".xlsxm":               cc(0xF1C3,   [76,  -1]),                       #   Excel
    ".xla":                 cc(0xF1C3,   [76,  -1]),                       #   Excel
    ".xlr":                 cc(0xF1C3,   [76,  -1]),                       #   MS Works
    ".xltm":                cc(0xF1C3,   [76,  -1]),                       #   Excel, macros
    ".xltx":                cc(0xF1C3,   [76,  -1]),                       #   Excel, template
    ".ods":                 cc(0xF016,   [76,  -1]),                       #   OpenOffice

    # Presentations
    ".pps":                 cc(0xF1C4,   [166, -1]),                       #   PowerPoint, slideshow
    ".ppt":                 cc(0xF1C4,   [166, -1]),                       #   PowerPoint
    ".pptx":                cc(0xF1C4,   [166, -1]),                       #   PowerPoint, slideshow
    ".ppts":                cc(0xF1C4,   [166, -1]),                       #   PowerPoint
    ".pptxm":               cc(0xF1C4,   [166, -1]),                       #   PowerPoint
    ".pptsm":               cc(0xF1C4,   [166, -1]),                       #   PowerPoint
    ".odp":                 cc(0xF016,   [166, -1]),                       #   OpenOffice
    ".otp":                 cc(0xF016,   [166, -1]),                       #   OpenOffice
    ".sxi":                 cc(0xF016,   [166, -1]),                       #   StarOffice, slideshow
    ".gslides":             cc(0xF1A0,   [166, -1]),                       #  Google Docs

    # Source files
    ".agda":                cc(0xF673,   [143, -1]),                       #   Agda
    ".lagda":               cc(0xF673,   [143, -1]),                       #   Agda
    ".agdai":               cc(0xF673,   [143, -1]),                       #   Agda
    ".ahk":                 cc(ord("H"), [191, -1]),                       #   AutoHotkey Script
    ".applescript":         cc(0xF179,   [186, -1]),                       #   Applescript
    ".as":                  cc(0xF0E7,   [203, -1]),                       #   Actionscript
    ".asa":                 cc(0xF673,   [182, -1]),                       #   .ASP
    ".asm":                 cc(0xF673,   [180, -1]),                       #   Assembly
    ".awk":                 cc(0xF673,   [230, -1]),                       #   Awk
    ".bash":                cc(0xF489,   [214, -1]),                       #   Shell
    ".fish":                cc(0xF489,   [214, -1]),                       #   Shell
    ".sh":                  cc(0xF489,   [214, -1]),                       #   Shell
    ".zsh":                 cc(0xF489,   [214, -1]),                       #   Shell
    ".csh":                 cc(0xF489,   [214, -1]),                       #   Shell (C Shell)
    ".c":                   cc(0xE61E,   [110, -1], [32, -1]),             #   C/C++
    ".c++":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".cc":                  cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".cp":                  cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".cpp":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".cxx":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".h":                   cc(0xE61E,   [110, -1], [32, -1]),             #   C/C++/Objective-C, header file
    ".h++":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++, header file
    ".hh":                  cc(0xE61E,   [110, -1], [32, -1]),             #   C++, header file
    ".hpp":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++, header file
    ".hxx":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++, header file
    ".ii":                  cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".inl":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".ipp":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".tcc":                 cc(0xE61E,   [110, -1], [32, -1]),             #   C++
    ".m":                   cc(0xE61E,   [110, -1], [32, -1]),             #   Objective-C
    ".mm":                  cc(0xE61E,   [110, -1], [32, -1]),             #   Objective-C++
    ".cgi":                 cc(0xF673,   [246, -1]),                       #   Common Gateway Interface
    ".def":                 cc(0xF673,   [246, -1]),                       # 
    ".cl":                  cc(0xF673,   [239, -1], [255, -1]),            #   Lisp
    ".el":                  cc(0xF673,   [239, -1], [255, -1]),            #   Lisp
    ".lisp":                cc(0xF673,   [239, -1], [255, -1]),            #   Lisp
    ".clj":                 cc(0xE76A,   [77,  -1], [117, -1]),            #   Clojure
    ".cljs":                cc(0xE76A,   [77,  -1], [117, -1]),            #   Clojure
    ".cljc":                cc(0xE76A,   [77,  -1], [117, -1]),            #   Clojure
    ".cljw":                cc(0xE76A,   [77,  -1], [117, -1]),            #   Clojure
    ".cr":                  cc(0xE21E,   [244, -1], [252, -1]),            #   Crystal
    ".cs":                  cc(0xF81A,   [40,  -1]),                       #   C Sharp
    ".csx":                 cc(0xF81A,   [40,  -1]),                       #   C Sharp
    ".css":                 cc(0xF81B,   [81,  -1]),                       #   Css
    ".sass":                cc(0xE74B,   [213, -1]),                       #   Sass
    ".scss":                cc(0xE74B,   [213, -1]),                       #   Sass
    ".less":                cc(0xE758,   [75,  -1]),                       #   Less
    ".styl":                cc(0xE759,   [203, -1]),                       #   Stylus
    ".d":                   cc(ord("D"), [197, -1]),                       # D  D
    ".di":                  cc(ord("D"), [197, -1]),                       # D  D
    ".dart":                cc(0xE798,   [69,  -1], [117, -1]),            #   Dart
    ".p":                   cc(ord("P"), [35, - 1]),                       #   Pascal
    ".pas":                 cc(ord("P"), [35, - 1]),                       #   Pascal
    ".elm":                 cc(0xE62C,   [80, - 1], [67,  -1]),            #   Elm
    ".epp":                 cc(0xF673,   [202, -1], [255, -1]),            #   Puppet
    ".pp":                  cc(0xF673,   [202, -1], [255, -1]),            #   Puppet
    ".erb":                 cc(0xE739,   [203, -1]),                       #   Ruby
    ".rb":                  cc(0xE739,   [203, -1]),                       #   Ruby
    ".erl":                 cc(0xE7B1,   [197, -1], [255, -1]),            #   Erlang
    ".ex":                  cc(0xF673,   [128, -1], [67,  -1]),            #   Euphoria
    ".exs":                 cc(0xE62D,   [97,  -1], [104, -1]),            #   Elixir
    ".f":                   cc(ord("F"), [137, -1]),                       # F  Fortran
    ".f90":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".F90":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".f95":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".F95":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".f03":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".F03":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".f08":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".F08":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".for":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".ftn":                 cc(ord("F"), [137, -1]),                       # F  Fortran
    ".fs":                  cc(0xE7A7,   [67,  -1], [39,  -1]),            #   F Sharp
    ".fsi":                 cc(0xE7A7,   [67,  -1], [39,  -1]),            #   F Sharp
    ".fsx":                 cc(0xE7A7,   [67,  -1], [39,  -1]),            #   F Sharp
    ".go":                  cc(0xFCD1,   [81,  -1], [255, -1]),            # ﳑ  Go
    ".gradle":              cc(0xF005,   [255, -1], [68,  -1]),            #   Groovy
    ".groovy":              cc(0xF005,   [255, -1], [68,  -1]),            #   Groovy
    ".gvy":                 cc(0xF005,   [255, -1], [68,  -1]),            #   Groovy
    ".gs":                  cc(0xF1A0,   [39,  -1], [153, -1]),            #   Google Apps Script
    ".gv":                  cc(0xF673,   [84,  -1]),                       #   Graphviz
    ".hs":                  cc(0xE61F,   [97,  -1], [105, -1]),            #   Haskell
    ".lhs":                 cc(0xE61F,   [97,  -1], [105, -1]),            #   Haskell
    ".cabal":               cc(0xE61F,   [97,  -1], [141, -1]),            #   Cabal (Haskell)
    ".htc":                 cc(0xF673,   [31,  -1]),                       #   HyperText Markup Language Components
    ".js":                  cc(0xE60C,   [226, -1]),                       #   JavaScript
    ".jsm":                 cc(0xE60C,   [226, -1]),                       #   JavaScript module
    ".mjs":                 cc(0xE60C,   [226, -1]),                       #   JavaScript module
    ".jsx":                 cc(0xFC06,   [51,  -1]),                       #   JavaScript (React)
    ".vue":                 cc(0xFD42,   [85,  -1]),                       #   JavaScript (Vue)
    ".svelte":              cc(0xF44C,   [209, -1]),                       #   JavaScript (Svelte)
    ".coffee":              cc(0xE61B,   [137, -1]),                       #   CoffeeScript
    ".ts":                  cc(0xE628,   [153, -1]),                       #   TypeScript
    ".tsx":                 cc(0xE628,   [153, -1]),                       #   TypeScript
    ".purs":                cc(0xF673,   [255, -1], [249, -1]),            #   PureScript
    ".inc":                 cc(0xF673,   [246, -1]),                       # 
    ".java":                cc(0xE256,   [68,  -1], [216, -1]),            #   Java
    ".jsp":                 cc(0xE256,   [68,  -1], [216, -1]),            #   Java
    ".bsh":                 cc(0xE256,   [68,  -1], [137, -1]),            #   BeanShell (Java)
    ".jl":                  cc(0xE624,   [35,  -1], [135, -1]),            #   julia
    ".kt":                  cc(ord("K"), [209, -1], [147, -1]),            # K  Kotlin
    ".kts":                 cc(ord("K"), [209, -1], [147, -1]),            # K  Kotlin
    ".lua":                 cc(0xE620,   [27,  -1], [75,  -1]),            #   Lua
    ".matlab":              cc(0xF673,   [67,  -1]),                       #   MATLAB
    ".mn":                  cc(0xF673,   [67,  -1]),                       #   MATLAB
    ".ml":                  cc(0xF673,   [214, -1]),                       #   OCaml
    ".mli":                 cc(0xF673,   [214, -1]),                       #   OCaml
    ".nim":                 cc(0xF6A4,   [222, -1]),                       #   Nimble
    ".nimble":              cc(0xF6A4,   [222, -1]),                       #   Nimble
    ".moon":                cc(0xF186,   [245, -1], [252, -1]),            #   MoonScript
    ".nb":                  cc(0xF673,   [160, -1]),                       #   Wolfram Mathematica
    ".pl":                  cc(0xE769,   [122, -1]),                       #   Perl
    ".pm":                  cc(0xE769,   [122, -1]),                       #   Perl
    ".t":                   cc(0xE769,   [122, -1]),                       #   Perl
    ".php":                 cc(0xE608,   [105, -1], [255, -1]),            #   PHP
    ".ctp":                 cc(0xE608,   [105, -1], [255, -1]),            #   CakePHP
    ".ps1":                 cc(0xF120,   [27,  -1], [255, -1]),            #   Powershell
    ".psd1":                cc(0xF120,   [27,  -1], [255, -1]),            #   Powershell
    ".psm1":                cc(0xF120,   [27,  -1], [255, -1]),            #   Powershell
    ".py":                  cc(0xE606,   [68,  -1], [228, -1]),            #   Python
    ".ipynb":               cc(0xE606,   [68,  -1], [228, -1]),            #   Jupyter Notebook (Python)
    ".r":                   cc(0xFCD2,   [32,  -1], [250, -1]),            # ﳒ  R
    ".rs":                  cc(0xE7A8,   [245, -1], [255, -1]),            #   Rust
    ".s":                   cc(0xE79D,   [101, -1]),                       #   Assembly
    ".scala":               cc(0xE737,   [167, -1]),                       #   Scala
    ".sed":                 cc(0xF673,   [142, -1]),                       #   sed
    ".swift":               cc(0xFBE3,   [209, -1]),                       # ﯣ  Swift
    ".sql":                 cc(0xF1C0,   [180, -1]),                       #   SQL
    ".msql":                cc(0xF1C0,   [180, -1]),                       #   SQL
    ".mysql":               cc(0xF1C0,   [180, -1]),                       #   SQL
    ".pgsql":               cc(0xF1C0,   [180, -1]),                       #   SQL
    ".tcl":                 cc(0xF673,   [65,  -1]),                       #   Tool Command Language
    ".vala":                cc(0xF673,   [255, -1], [104,  -1]),           #   Vala
    ".vapi":                cc(0xF673,   [255, -1], [104,  -1]),           #   Vala
    ".vb":                  cc(ord("V"), [66,  -1]),                       # V  Visual Basic
    ".vba":                 cc(ord("V"), [66,  -1]),                       # V  Visual Basic
    ".vbs":                 cc(ord("V"), [66,  -1]),                       # V  Visual Basic

    # Configuration/key-value data:
    "*authorized_keys":     cc(0xF084,   [248, -1, "3"]),                  #   SSH
    "*known_hosts":         cc(0xF109,   [248, -1, "3"]),                  #   SSH
    "*cfg":                 cc(0xF0AD,   [248, -1, "3"]),                  # 
    "*conf":                cc(0xF0AD,   [248, -1, "3"]),                  # 
    ".cfg":                 cc(0xF0AD,   [248, -1, "3"]),                  # 
    ".config":              cc(0xF0AD,   [248, -1, "3"]),                  # 
    ".allow":               cc(0xF00C,   [120, -1, "3"]),                  #   /etc/hosts.allow
    ".deny":                cc(0xF467,   [203, -1, "3"]),                  #   /etc/hosts.deny
    ".application":         cc(0xE60B,   [248, -1, "3"]),                  # 
    ".bash_profile":        cc(0xF489,   [67,  -1], [248, -1, "3"]),       #   Shell
    ".bashrc":              cc(0xF489,   [67,  -1], [248, -1, "3"]),       #   Shell
    ".zsh_profile":         cc(0xF489,   [67,  -1], [248, -1, "3"]),       #   Shell
    ".zshrc":               cc(0xF489,   [67,  -1], [248, -1, "3"]),       #   Shell
    ".profile":             cc(0xF489,   [67,  -1], [248, -1, "3"]),       #   Shell
    ".zwc":                 cc(0xF487,   [67,  -1], [248, -1, "3"]),       #   Shell
    ".cue":                 cc(0xE60B,   [248, -1, "3"]),                  # 
    ".description":         cc(0xE60B,   [248, -1, "3"]),                  # 
    ".desktop":             cc(0xF6C3,   [248, -1, "3"]),                  # 
    ".directory":           cc(0xE60B,   [248, -1, "3"]),                  # 
    ".editorconfig":        cc(0xE60B,   [248, -1, "3"]),                  # 
    ".envrc":               cc(0xE60B,   [248, -1, "3"]),                  # 
    ".flake8":              cc(0xE606,   [68,  -1], [248, -1, "3"]),       #   Python (code-style)
    ".gemfile":             cc(0xE739,   [203, -1], [248, -1, "3"]),       #   Ruby
    ".gemspec":             cc(0xE739,   [203, -1], [248, -1, "3"]),       #   Ruby
    ".ini":                 cc(0xF0AD,   [248, -1, "3"]),                  # 
    ".json":                cc(0xE60B,   [226, -1], [248, -1, "3"]),       # 
    ".jsonl":               cc(0xE60B,   [226, -1], [248, -1, "3"]),       # 
    ".properties":          cc(0xE256,   [68,  -1], [248, -1, "3"]),       #   Java
    ".sty":                 cc(0xF0AD,   [248, -1, "3"]),                  #   LaTex
    ".tdy":                 cc(0xE769,   [122, -1], [248, -1, "3"]),       #   Perl (code-style)
    ".theme":               cc(0xE60B,   [248, -1, "3"]),                  # 
    ".tml":                 cc(0xE60B,   [240, -1, "3"], [248, -1, "3"]),  # 
    ".toml":                cc(0xE60B,   [240, -1, "3"], [248, -1, "3"]),  # 
    ".ui":                  cc(0xE60B,   [248, -1, "3"]),                  # 
    ".urlview":             cc(0xE60B,   [248, -1, "3"]),                  # 
    ".vcard":               cc(0xF2BE,   [220, -1], [248, -1, "3"]),       #   vCard
    ".vcf":                 cc(0xF2BE,   [220, -1], [248, -1, "3"]),       #   vCard
    ".vim":                 cc(0xE62B,   [34,  -1], [248, -1, "3"]),       #   Vim
    ".viminfo":             cc(0xE62B,   [34,  -1], [248, -1, "3"]),       #   Vim
    ".vimrc":               cc(0xE62B,   [34,  -1], [248, -1, "3"]),       #   Vim
    ".yaml":                cc(0xE60B,   [204, -1], [248, -1, "3"]),       # 
    ".yml":                 cc(0xE60B,   [204, -1], [248, -1, "3"]),       # 
    ".xml":                 cc(0xF121,   [223, -1], [248, -1, "3"]),       # 

    # Node.js/npm
    "*node_modules":        cc(0xE71E,   [240, -1, "3"]),                  # 
    ".npmignore":           cc(0xE71E,   [167, -1], [248, -1, "3"]),       # 
    ".npmrc":               cc(0xE71E,   [167, -1], [248, -1, "3"]),       # 

    # Git
    ".git":                 cc(0xF1D3,   [240, -1, "3"]),                  # 
    ".gitattributes":       cc(0xF1D3,   [203, -1], [248, -1, "3"]),       # 
    ".gitconfig":           cc(0xF1D3,   [203, -1], [248, -1, "3"]),       # 
    ".gitignore_global":    cc(0xF1D3,   [203, -1], [248, -1, "3"]),       # 
    ".gitignore":           cc(0xF1D3,   [203, -1], [248, -1, "3"]),       # 
    ".gitmodules":          cc(0xF1D3,   [203, -1], [248, -1, "3"]),       # 

    # Mercurial
    ".hg":                  cc(0xF223,   [240, -1, "3"]),                  # 
    ".hgignore":            cc(0xF223,   [252, -1], [248, -1, "3"]),       # 
    ".hgrc":                cc(0xF223,   [252, -1], [248, -1, "3"]),       # 
    ".hgsigs":              cc(0xF223,   [252, -1], [248, -1, "3"]),       # 
    ".hgtags":              cc(0xF223,   [252, -1], [248, -1, "3"]),       # 
    ".hgrc":                cc(0xF223,   [252, -1], [248, -1, "3"]),       # 

    # systemd
    # http://www.freedesktop.org/software/systemd/man/systemd.unit.html
    ".automount":           cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".device":              cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".mount":               cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".path":                cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".service":             cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    "*@.service":           cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".snapshot":            cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".socket":              cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".swap":                cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".target":              cc(0xF109,   [242, -1], [248, -1, "3"]),       # 
    ".timer":               cc(0xF109,   [242, -1], [248, -1, "3"]),       # 

    # Error logs
    ".err":                 cc(0xF06A,   [203, -1], [240, -1, "3"]),      # 
    ".error":               cc(0xF06A,   [203, -1], [240, -1, "3"]),      # 
    ".stderr":              cc(0xF06A,   [203, -1], [240, -1, "3"]),      # 

    # State dumps
    ".dump":                cc(0xf022,   [240, -1, "3"]),                 # 
    ".zcompdump":           cc(0xf022,   [240, -1, "3"]),                 #   Shell
    ".stackdump":           cc(0xf022,   [240, -1, "3"]),                 # 

    # tcpdump, network traffic capture
    ".cap":                 cc(0xE765,   [74,  -1]),                      # 
    ".dmp":                 cc(0xE765,   [74,  -1]),                      # 
    ".pcap":                cc(0xE765,   [74,  -1]),                      # 

    # Build files
    ".am":                  cc(0xF0F7,   [195, -1, "1"]),                 #   Automake
    ".scan":                cc(0xF0F7,   [195, -1, "1"]),                 #   Automake
    ".m4":                  cc(0xF0F7,   [195, -1, "1"]),                 #   Automake
    ".cmake":               cc(0xF0F7,   [214, -1], [195, -1, "1"]),      #   CMake
    "*Dockerfile":          cc(0xF308,   [39,  -1], [195, -1, "1"]),      # 
    ".dockerignore":        cc(0xF308,   [39,  -1], [248, -1, "3"]),      # 
    "*Makefile":            cc(0xF0F7,   [214, -1], [195, -1, "1"]),      # 
    ".make":                cc(0xF0F7,   [214, -1], [195, -1, "1"]),      # 
    "*MANIFEST":            cc(0xF0F7,   [195, -1, "1"]),                 # 
    "*Rakefile":            cc(0xE739,   [203, -1], [195, -1, "1"]),      #   Ruby
    ".rake":                cc(0xE739,   [203, -1], [195, -1, "1"]),      #   Ruby
    "*pm_to_blib":          cc(0xE769,   [122, -1], [195, -1, "1"]),      #   Perl
    ".tf":                  cc(ord("T"), [99,  -1], [195, -1, "1"]),      # T  Orchestration
    ".tfstate":             cc(ord("T"), [99,  -1], [195, -1, "1"]),      # T  Orchestration
    ".tfvars":              cc(ord("T"), [99,  -1], [195, -1, "1"]),      # T  Orchestration
    "*Vagrantfile":         cc(ord("V"), [27,  -1], [195, -1, "1"]),      # V  Vagrant

    # Database
    ".accdb":               cc(0xF1C0,   [103, -1]),                      # 
    ".accde":               cc(0xF1C0,   [103, -1]),                      # 
    ".accdr":               cc(0xF1C0,   [103, -1]),                      # 
    ".accdt":               cc(0xF1C0,   [103, -1]),                      # 
    ".db":                  cc(0xF1C0,   [103, -1]),                      # 
    ".fmp12":               cc(0xF1C0,   [103, -1]),                      # 
    ".fp7":                 cc(0xF1C0,   [103, -1]),                      # 
    ".localstorage":        cc(0xF1C0,   [103, -1]),                      # 
    ".mdb":                 cc(0xF1C0,   [103, -1]),                      # 
    ".mde":                 cc(0xF1C0,   [103, -1]),                      # 
    ".odb":                 cc(0xF1C0,   [103, -1]),                      #   OpenOffice
    ".rdb":                 cc(0xF1C0,   [103, -1]),                      #   Redis
    ".sqlite":              cc(0xF1C0,   [103, -1]),                      # 
    ".sqlite3":             cc(0xF1C0,   [103, -1]),                      # 
    ".typelib":             cc(0xF1C0,   [103, -1]),                      # 

    # Other
    ".ai":                  cc(0xE7B4,   [208, -1], [-1,  -1]),           #   Adobe Illustrator
    ".fla":                 cc(0xF0E7,   [203, -1], [-1,  -1]),           #   Adobe Flash
    ".psd":                 cc(0xE7B8,   [33,  -1], [-1,  -1]),           #   Adobe Photoshop
    ".psf":                 cc(0xE7B8,   [33,  -1], [248, -1, "3"]),      #   Photoshop Proof Settings File
    ".pdf":                 cc(0xF1C1,   [203, -1], [-1,  -1]),           #   Adobe PDF
    ".chm":                 cc(0xFB24,   [229, -1], [-1,  -1, "3"]),      # ﬤ  Help file
    ".class":               cc(0xE256,   [68,  -1], [253, -1]),           #   Java bytecode
    ".diff":                cc(0xF457,   [120, -1], [210, -1, "3"]),      # 
    ".patch":               cc(0xF457,   [120, -1], [210, -1, "3"]),      # 
    ".djvu":                cc(0xF0C6,   [141, -1], [-1,  -1]),           #   DjVu
    ".epub":                cc(0xE28B,   [210, -1], [230, -1]),           #   Ebook
    ".mobi":                cc(0xE28B,   [210, -1], [230, -1]),           #   Ebook
    ".gbr":                 cc(0xF5E2,   [240, -1, "3"], [253, -1]),      #   GIMP
    ".scm":                 cc(0xF5E2,   [240, -1, "3"], [253, -1]),      #   GIMP
    ".ics":                 cc(0xF073,   [203, -1], [-1,  -1]),           #   Calendar file
    ".md5":                 cc(0xF00C,   [116, -1], [-1,  -1]),           #   Checksum file
    ".sfv":                 cc(0xF00C,   [116, -1], [-1,  -1]),           #   Checksum file
    ".mo":                  cc(0xF1AB,   [86,  -1]),                      #   Translation file
    ".po":                  cc(0xF1AB,   [86,  -1]),                      #   Translation file
    ".pot":                 cc(0xF1AB,   [86,  -1]),                      #   Translation file
    ".msg":                 cc(0xF6ED,   [220, -1], [-1,  -1]),           #   Email file
    ".pcb":                 cc(0xF493,   [65,  -1], [-1,  -1]),           #   Printed Circuit Board Design File
    ".rdata":               cc(0xFCD2,   [32,  -1], [248, -1, "3"]),      # ﳒ  R, workspace data
    ".rproj":               cc(0xFCD2,   [32,  -1], [248, -1, "3"]),      # ﳒ  RStudio project file
    ".rdf":                 cc(0xE212,   [116, -1]),                      #   Resource Description Framework
    ".spl":                 cc(0xF02F,   [101, -1]),                      #   Printer spool file
    ".srt":                 cc(0xF867,   [186, -1], [-1, -1]),            #   Subtitles
    ".sub":                 cc(0xF867,   [186, -1], [-1, -1]),            #   Subtitles
    ".torrent":             cc(0xF019,   [116, -1], [-1, -1]),            # 
    ".zsh-theme":           cc(0xF489,   [67, -1]),                       #   Shell

    # "Unimportant" (text)
    ".bash_history":        cc(0xF489,   [240, -1, "3"]),                 #   Shell
    ".bash_logout":         cc(0xF489,   [240, -1, "3"]),                 #   Shell
    ".zsh_history":         cc(0xF489,   [240, -1, "3"]),                 #   Shell
    ".gitkeep":             cc(0xF1F8,   [240, -1, "3"]),                 # 
    ".log":                 cc(0xF0F6,   [240, -1, "3"]),                 # 
    ".pid":                 cc(0xF0F6,   [240, -1, "3"]),                 # 

    # "Unimportant" (undo)
    ".orig":                cc(0xF0E2,   [240, -1, "3"]),                 # 
    ".pacnew":              cc(0xF0E2,   [240, -1, "3"]),                 # 
    ".un~":                 cc(0xF0E2,   [240, -1, "3"]),                 # 

    # "Unimportant" (backups)
    ".bak":                 cc(0xF0E2,   [240, -1, "3"]),                 # 
    ".bup":                 cc(0xF0E2,   [240, -1, "3"]),                 # 
    ".old":                 cc(0xF0E2,   [240, -1, "3"]),                 # 

    # "Unimportant" (build_artifacts)
    ".aux":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".bbl":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".bcf":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".blg":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".dyn_hi":              cc(0xF1F8,   [240, -1, "3"]),                 #   haskell
    ".dyn_o":               cc(0xF1F8,   [240, -1, "3"]),                 #   haskell
    ".fdb_LaTextmk":        cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".fls":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".hi":                  cc(0xF1F8,   [240, -1, "3"]),                 #   haskell
    ".idx":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".ilg":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".ind":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".la":                  cc(0xF1F8,   [240, -1, "3"]),                 #   C/C++
    ".lo":                  cc(0xF1F8,   [240, -1, "3"]),                 #   C/C++
    ".o":                   cc(0xF1F8,   [240, -1, "3"]),                 #   C/C++
    ".in":                  cc(0xF060,   [240, -1, "3"]),                 #   Input file
    ".out":                 cc(0xF061,   [240, -1, "3"]),                 #   Output file
    ".pyc":                 cc(0xE606,   [240, -1, "3"]),                 #   Python compiled file
    "*__pycache__":         cc(0xE606,   [240, -1, "3"]),                 #   Python compiled data
    ".rlib":                cc(0xF1F8,   [240, -1, "3"]),                 #   Static Rust library
    ".scons_opt":           cc(0xF1F8,   [240, -1, "3"]),                 #   scons
    ".sconsign.dblite":     cc(0xF1F8,   [240, -1, "3"]),                 #   scons
    ".skip":                cc(0xF0F7,   [240, -1, "3"]),                 #   Automake
    ".synctex.gz":          cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex
    ".toc":                 cc(0xF1F8,   [240, -1, "3"]),                 #   LaTex

    # unimportant, macOS
    ".CFUserTextEncoding":  cc(0xF179,   [240, -1, "3"]),                 # 
    ".DS_Store":            cc(0xF179,   [240, -1, "3"]),                 # 
    ".localized":           cc(0xF179,   [240, -1, "3"]),                 # 
    ".plist":               cc(0xF179,   [240, -1, "3"]),                 # 

    # "Unimportant" (other)
    "*~":                   cc(0xF6A8,   [240, -1, "3"]),                 # 
    ".cache":               cc(0xF6A8,   [240, -1, "3"]),                 # 
    ".dist":                cc(0xF6A8,   [240, -1, "3"]),                 # 
    ".incomplete":          cc(0xF6A8,   [240, -1, "3"]),                 # 
    ".lock":                cc(0xF023,   [240, -1, "3"]),                 # 
    "*lockfile":            cc(0xF023,   [240, -1, "3"]),                 # 
    ".part":                cc(0xF6A8,   [240, -1, "3"]),                 # 
    ".state":               cc(0xF023,   [240, -1, "3"]),                 # 
    ".swo":                 cc(0xF250,   [240, -1, "3"]),                 # 
    ".swp":                 cc(0xF250,   [240, -1, "3"]),                 # 
    ".temp":                cc(0xF250,   [240, -1, "3"]),                 # 
    ".tmp":                 cc(0xF250,   [240, -1, "3"]),                 # 
    ".sassc":               cc(0xF250,   [240, -1, "3"]),                 # 

    # Xcode
    ".xcconfig":            cc(ord("X"), [45,  -1], [248, -1, "3"]),      # X
    ".entitlements":        cc(ord("X"), [45,  -1], [248, -1, "3"]),      # X
    ".strings":             cc(ord("X"), [45,  -1], [248, -1, "3"]),      # X
    ".storyboard":          cc(ord("X"), [45,  -1], [248, -1, "3"]),      # X
    ".xcsettings":          cc(ord("X"), [45,  -1], [248, -1, "3"]),      # X
    ".xib":                 cc(ord("X"), [45,  -1], [248, -1, "3"]),      # X

    # Encryption files
    ".3des":                cc(0xF084,   [192, -1, "3"]),                 # 
    ".aes":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".asc":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".bfe":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".enc":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".gpg":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".p7s":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".p12":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".pem":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".pgp":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".sig":                 cc(0xF084,   [192, -1, "3"]),                 # 
    ".signature":           cc(0xF084,   [192, -1, "3"]),                 # 
    "*id_dsa":              cc(0xF084,   [192, -1, "3"]),                 # 
    "*id_rsa":              cc(0xF084,   [192, -1, "3"]),                 # 
    "*id_ecdsa":            cc(0xF084,   [192, -1, "3"]),                 # 
    "*id_ed25519":          cc(0xF084,   [192, -1, "3"]),                 # 

    # Game files
    ".32x":                 cc(0xF11B,   [212, -1]),                      # 
    ".a00":                 cc(0xF11B,   [212, -1]),                      # 
    ".a52":                 cc(0xF11B,   [212, -1]),                      # 
    ".a64":                 cc(0xF11B,   [212, -1]),                      # 
    ".A64":                 cc(0xF11B,   [212, -1]),                      # 
    ".a78":                 cc(0xF11B,   [212, -1]),                      # 
    ".adf":                 cc(0xF11B,   [212, -1]),                      # 
    ".atr":                 cc(0xF11B,   [212, -1]),                      # 
    ".cdi":                 cc(0xF11B,   [212, -1]),                      # 
    ".fm2":                 cc(0xF11B,   [212, -1]),                      # 
    ".gb":                  cc(0xF11B,   [212, -1]),                      # 
    ".gba":                 cc(0xF11B,   [212, -1]),                      # 
    ".gbc":                 cc(0xF11B,   [212, -1]),                      # 
    ".gel":                 cc(0xF11B,   [212, -1]),                      # 
    ".gg":                  cc(0xF11B,   [212, -1]),                      # 
    ".ggl":                 cc(0xF11B,   [212, -1]),                      # 
    ".ipk":                 cc(0xF11B,   [212, -1]),                      # 
    ".j64":                 cc(0xF11B,   [212, -1]),                      # 
    ".nds":                 cc(0xF11B,   [212, -1]),                      # 
    ".nes":                 cc(0xF11B,   [212, -1]),                      # 
    ".rom":                 cc(0xF11B,   [212, -1]),                      # 
    ".sav":                 cc(0xF11B,   [212, -1]),                      # 
    ".sms":                 cc(0xF11B,   [212, -1]),                      # 
    ".st":                  cc(0xF11B,   [212, -1]),                      # 
    ".pgn":                 cc(0xE25F,   [212, -1]),                      #  Chess game file
  }

  return FORMAT_COLORS, SPECIAL, EXTENSION_LIST

# Formats arguments into an LS_COLORS-complete escape sequence.
def color_char(char, clr1, clr2 = []):
  ch_str = get_unicode(char)
  if extra_space:
    ch_str = ch_str + " "
  f1, b1, f2, b2 = -1, -1, -1, -1
  o1, o2 = "", "";
  if len(clr1) == 3:
    f1, b1, o1 = clr1
  else:
    f1, b1 = clr1
  if clr2 and len(clr2) == 3:
    f2, b2, o2 = clr2
  elif clr2:
    f2, b2 = clr2
  if (clr2):
    return "m%s\x1b" % ("%s%s \x1b[0m%s" % (color_seq(f1, b1, str(o1)), ch_str, color_seq(f2, b2, str(o2))))
  else:
    return "m%s\x1b" % ("%s%s " % (color_seq(f1, b1, str(o1)), ch_str))

cc = color_char

# Formats fg and bg into an escape sequence.
def color_seq(f, b, other = ""):
  if isinstance(f, str):
    f = color_output_rgb(f)
  else:
    f = color_output(f)
  if isinstance(b, str):
    b = color_output_rgb(b, True)
  else:
    b = color_output(b, True)
  if (f != "" and b != ""):
    f += ";"
  other = list(other)
  other = ";".join(other)
  if (other != "" and (f != "" or b != "")):
    other += ";"
  return "\x1b[%s%s%sm" % (other, f, b)

# Formats a 256-color code into a fg or bg value
def color_output(c, bg = False):
  if (c == -1):
    return ""
  if (bg):
    return "48;5;%i" % c
  else:
    return "38;5;%i" % c

# Formats a hex color into a fg or bg value
def color_output_rgb(hex, bg = False):
  r, g, b = hex_to_rgb(hex)
  if (bg):
    return "48;2;%i;%i;%i" % (r, g, b)
  else:
    return "38;2;%i;%i;%i" % (r, g, b)

# Convert hex color to rgb values
def hex_to_rgb(hex):
  hex = hex.lstrip('#')
  return tuple(int(hex[i:i+2], 16) for i in (0, 2, 4))

# Return a unicode character. Python 2 and 3 complete.
def get_unicode(ch):
  try:
    return unichr(ch)
  except:
    return chr(ch)


LEFT   =  "lc"
RIGHT  =  "rc"
END    =  "ec"
RESET  =  "rs"

# LS_COLORS special file codes.
NORMAL        =  "no"
FILE          =  "fi"
DIRECTORY     =  "di"
LINK          =  "ln"
ORPHAN        =  "or"
MISSING       =  "mi"
PIPE          =  "pi"
SOCKET        =  "so"
BLOCKDEV      =  "bd"
CHARDEV       =  "cd"
DOOR          =  "do"
EXEC          =  "ex"
SETUID        =  "su"
SETGID        =  "sg"
STICKY        =  "st"
OTHERWRITE    =  "ow"
STOTHERWRITE  =  "tw"
CAPABILITIES  =  "ca"
MULTIHARDLINK =  "mh"

if __name__ == "__main__":
  import sys
  import os
  extra_space = False
  try:
    if sys.argv[1] == "--extra-space":
      extra_space = True
  except:
    pass
  lsc = ""
  formcol, special, exten = get_colors()
  try:
    if sys.argv[1] == "test": # generate a test directory with all file extensions
      os.system("mkdir -p ebls-ext-test")
      os.system("touch " + " ".join("ebls-ext-test/" + ext for ext in exten.keys()))
      sys.exit()
  except:
    pass

  # Format left/right/exit/reset color codes.
  for compname in formcol.keys():
    comp = formcol[compname]
    if comp != "":
      lsc += compname + "=" + comp + ":"
  # Format default file/folder colors.
  for compname in special.keys():
    comp = special[compname]
    if comp != "":
      lsc += compname + "=" + comp + ":"
  # Format extensions.
  for compname in sorted(exten.keys()):
    comp = exten[compname]
    if comp != "":
      if compname.startswith("*"):
        lsc += compname + "=" + comp + ":"
      elif compname.startswith("-"):
        lsc += compname + "=" + comp + ":"
      else:
        lsc += "*." + compname.lstrip("*.") + "=" + comp + ":"
  try:
    sys.stdout.buffer.write(lsc.encode('utf-8'))
  except:
    print(lsc.encode('utf-8')) # python2
